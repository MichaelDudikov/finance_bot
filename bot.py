import asyncio
import re
import json
import os
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import CommandStart, Command

# –¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê
TOKEN = "TOKEN"
DATA_FILE = "finance_dan.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
else:
    data = {"income": {}, "expenses": {}}


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
pattern = re.compile(r"(\D+?)\s*(-?\d+)")


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ, {message.from_user.first_name}. –Ø –±–æ—Ç —Å—á–∏—Ç–∞—é—â–∏–π –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã.")
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç : –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º–∞\n(–Ω–∞–ø—Ä–∏–º–µ—Ä : –∑–∞—Ä–ø–ª–∞—Ç–∞ 5000 –∏–ª–∏ –µ–¥–∞ -1000)\n"
                         "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å /balance")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_balance_info():
    total_income = sum(sum(cat.values()) for cat in data["income"].values())
    total_expenses = sum(sum(cat.values()) for cat in data["expenses"].values())
    balance = total_income - total_expenses

    income_text = "\n".join(
        [f"{cat} : {sum(items.values())} ‚ÇΩ" for cat, items in data["income"].items()]) or "–ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤"
    expenses_text = "\n".join(
        [f"{cat} : {sum(items.values())} ‚ÇΩ" for cat, items in data["expenses"].items()]) or "–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤"

    return balance, income_text, expenses_text


# –ö–æ–º–∞–Ω–¥–∞ /balance - –≤—ã–≤–æ–¥–∏—Ç –±–∞–ª–∞–Ω—Å
@dp.message(Command('balance'))
async def show_balance(message: Message):
    balance, income_text, expenses_text = get_balance_info()

    text = (f"üí∞ **–ë–∞–ª–∞–Ω—Å** : {balance} ‚ÇΩ\n\n"
            f"üìà **–î–æ—Ö–æ–¥—ã :**\n{income_text}\n\n"
            f"üìâ **–†–∞—Å—Ö–æ–¥—ã :**\n{expenses_text}")

    await message.reply(text, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤)
@dp.message()
async def add_transaction(message: Message):
    match = pattern.match(message.text)

    if not match:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç : –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä : –∑–∞—Ä–ø–ª–∞—Ç–∞ 5000 –∏–ª–∏ –µ–¥–∞ -1000")
        return

    category, amount = match.groups()
    amount = int(amount)

    transaction_type = "income" if amount > 0 else "expenses"
    category = category.strip()
    amount = abs(amount)  # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –º–∏–Ω—É—Å, —Ç–∞–∫ –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥—ã —É–∂–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

    if category not in data[transaction_type]:
        data[transaction_type][category] = {}

    data[transaction_type][category][message.date.timestamp()] = amount
    save_data()

    await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ : {category} {amount} ‚ÇΩ")


async def main():
    dp.startup.register(startup)
    await dp.start_polling(bot)


async def startup():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ...')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
